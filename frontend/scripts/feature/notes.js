// ===================== NOTES MANAGEMENT MODULE =====================
// File: notes.js - Qu·∫£n l√Ω t·∫•t c·∫£ ch·ª©c nƒÉng li√™n quan ƒë·∫øn ghi ch√∫

class NotesManager {
    constructor() {
        this.notesByRoomNameDate = {};
        this.allDates = new Set();
    }

    // ===================== LOAD NOTES TO MAIN TABLE =====================
    async loadNotesToTable(filteredData) {
        try {
            // Ki·ªÉm tra Firebase connection
            if (typeof db === 'undefined') {
                console.warn("Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, hi·ªÉn th·ªã b·∫£ng kh√¥ng c√≥ ghi ch√∫");
                this.renderStudentTable(filteredData);
                return;
            }

            console.log("üîÑ ƒêang t·∫£i d·ªØ li·ªáu ghi ch√∫ t·ª´ Firestore...");

            // L·∫•y d·ªØ li·ªáu ghi ch√∫ t·ª´ Firestore
            const snapshot = await db.collection("cham_phong_9").orderBy("createdAt").get();

            // T·∫°o object l∆∞u tr·ªØ ghi ch√∫ theo room-name-date
            this.notesByRoomNameDate = {};
            this.allDates = new Set();

            console.log(`üìã T√¨m th·∫•y ${snapshot.size} b·∫£n ghi trong Firestore`);

            snapshot.forEach(doc => {
                const data = doc.data();
                console.log("üìÑ ƒêang x·ª≠ l√Ω document:", {
                    id: doc.id,
                    room: data.room,
                    nguoiTruc: data.nguoiTruc,
                    ghiChu: data.ghiChu,
                    createdAt: data.createdAt
                });

                // Ch·ªâ x·ª≠ l√Ω khi c√≥ ghi ch√∫ kh√¥ng r·ªóng
                if (data.ghiChu && data.ghiChu.trim() !== "" && data.room && data.nguoiTruc) {
                    // Chuy·ªÉn ƒë·ªïi timestamp th√†nh date string
                    let dateStr = "";
                    if (data.createdAt) {
                        if (typeof data.createdAt === 'string') {
                            dateStr = new Date(data.createdAt).toLocaleDateString("vi-VN");
                        } else if (data.createdAt && data.createdAt.toDate) {
                            dateStr = data.createdAt.toDate().toLocaleDateString("vi-VN");
                        } else if (data.serverTimestamp && data.serverTimestamp.toDate) {
                            dateStr = data.serverTimestamp.toDate().toLocaleDateString("vi-VN");
                        }
                    }

                    if (dateStr) {
                        this.allDates.add(dateStr);
                        // T·∫°o key theo format: room-nguoiTruc-date
                        const key = `${data.room}-${data.nguoiTruc}-${dateStr}`;
                        this.notesByRoomNameDate[key] = data.ghiChu;

                        console.log(`‚úÖ ƒê√£ l∆∞u ghi ch√∫: ${key} = "${data.ghiChu}"`);
                    }
                }
            });

            console.log(`üìä T·ªïng c·ªông ${this.allDates.size} ng√†y c√≥ ghi ch√∫:`, Array.from(this.allDates));
            console.log("üóÇÔ∏è D·ªØ li·ªáu ghi ch√∫:", this.notesByRoomNameDate);

            // S·∫Øp x·∫øp ng√†y theo th·ª© t·ª± th·ªùi gian
            const sortedDates = Array.from(this.allDates).sort((a, b) => {
                const [dayA, monthA, yearA] = a.split('/');
                const [dayB, monthB, yearB] = b.split('/');
                const dateA = new Date(`${yearA}-${monthA}-${dayA}`);
                const dateB = new Date(`${yearB}-${monthB}-${dayB}`);
                return dateA - dateB;
            });

            console.log("üìÖ Ng√†y ƒë√£ s·∫Øp x·∫øp:", sortedDates);

            // Render b·∫£ng v·ªõi c√°c c·ªôt ghi ch√∫ theo ng√†y
            this.renderStudentTableWithNotes(filteredData, sortedDates);

        } catch (err) {
            console.error("‚ùå L·ªói load ghi ch√∫:", err);
            this.renderStudentTable(filteredData);
        }
    }

    // Main render function with dynamic notes columns
    renderStudentTableWithNotes(data, dates) {
        const tbody = document.getElementById("studentTableBody");
        const thead = document.querySelector("#studentTableBody").closest('table').querySelector('thead tr');

        if (!tbody || !thead) return;

        console.log("üé® ƒêang render b·∫£ng v·ªõi d·ªØ li·ªáu:", {
            students: data.length,
            dates: dates.length,
            datesList: dates
        });

        // Clear existing content
        tbody.innerHTML = "";

        // T·∫°o header c∆° b·∫£n
        thead.innerHTML = `
            <th class="col-stt" style="width: 50px;">STT</th>
            <th class="col-mssv" style="width: 80px;">MSSV</th>
            <th class="col-name" style="width: 200px;">H·ªå V√Ä T√äN</th>
            <th class="col-room" style="width: 70px;">PH√íNG</th>
            <th class="col-floor" style="width: 60px;">T·∫¶NG</th>
        `;

        // Th√™m c√°c c·ªôt ng√†y ƒë·ªông (ch·ªâ khi c√≥ ghi ch√∫)
        dates.forEach(date => {
            const th = document.createElement('th');
            th.className = 'col-note';
            th.textContent = date;
            th.style.minWidth = '150px';
            th.style.maxWidth = '200px';
            th.style.backgroundColor = '#e8f5e8';
            th.style.fontSize = '12px';
            th.style.fontWeight = 'bold';
            th.style.textAlign = 'center';
            th.style.border = '1px solid #ddd';
            th.style.position = 'sticky';
            th.style.top = '0';
            th.style.zIndex = '10';
            thead.appendChild(th);
        });

        // Render data rows
        data.forEach((student, index) => {
            const row = document.createElement("tr");
            row.setAttribute("data-mssv", student.mssv);
            row.setAttribute("data-name", student.name);
            row.setAttribute("data-room", student.room);

            // C√°c c·ªôt c∆° b·∫£n
            row.innerHTML = `
                <td style="text-align: center; font-weight: bold;">${index + 1}</td>
                <td style="text-align: center; font-family: monospace;">${student.mssv}</td>
                <td style="text-align: left; padding-left: 8px; font-weight: 500;">${student.name}</td>
                <td style="text-align: center; font-weight: bold; color: #007bff;">${student.room}</td>
                <td style="text-align: center;">${student.floor}</td>
            `;

            // Th√™m c√°c c·ªôt ghi ch√∫ theo ng√†y
            dates.forEach(date => {
                const td = document.createElement('td');

                // T·∫°o key ƒë·ªÉ t√¨m ghi ch√∫ - th·ª≠ nhi·ªÅu format kh√°c nhau
                const possibleKeys = [
                    `${student.room}-${student.name}-${date}`,  // room-name-date
                    `${student.room}-${student.mssv}-${date}`,  // room-mssv-date
                ];

                let note = "";
                let foundKey = "";

                // T√¨m ghi ch√∫ theo c√°c key c√≥ th·ªÉ
                for (const key of possibleKeys) {
                    if (this.notesByRoomNameDate[key]) {
                        note = this.notesByRoomNameDate[key];
                        foundKey = key;
                        break;
                    }
                }

                console.log(`üîç T√¨m ghi ch√∫ cho ${student.name} (${student.room}) ng√†y ${date}:`, {
                    possibleKeys,
                    foundKey,
                    note
                });

                td.textContent = note || "";
                td.title = note ? `${student.name} - ${date}: ${note}` : `Kh√¥ng c√≥ ghi ch√∫ cho ${student.name} ng√†y ${date}`;
                td.style.fontSize = '11px';
                td.style.padding = '6px 4px';
                td.style.textAlign = 'left';
                td.style.maxWidth = '200px';
                td.style.overflow = 'hidden';
                td.style.textOverflow = 'ellipsis';
                td.style.whiteSpace = 'nowrap';
                td.style.border = '1px solid #eee';
                td.style.cursor = 'help';

                // Highlight cells c√≥ ghi ch√∫
                if (note) {
                    td.style.backgroundColor = '#fff9c4';
                    td.style.fontWeight = '600';
                    td.style.color = '#8b5a00';
                    td.style.borderLeft = '3px solid #ffc107';
                } else {
                    td.style.backgroundColor = '#f8f9fa';
                    td.style.color = '#6c757d';
                    td.style.fontStyle = 'italic';
                    td.textContent = '-';
                }

                row.appendChild(td);
            });

            tbody.appendChild(row);
        });

        // Th√™m th√¥ng tin t·ªïng k·∫øt
        if (dates.length > 0) {
            const infoRow = document.createElement('tr');
            const totalColumns = 5 + dates.length;
            const totalNotes = Object.keys(this.notesByRoomNameDate).length;

            infoRow.innerHTML = `
                <td colspan="${totalColumns}" style="text-align: center; font-size: 12px; color: #495057; padding: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-top: 2px solid #007bff;">
                    üìã <strong>T·ªïng quan:</strong> 
                    ${dates.length} ng√†y c√≥ ghi ch√∫ | 
                    ${totalNotes} ghi ch√∫ | 
                    ${data.length} sinh vi√™n ƒë∆∞·ª£c hi·ªÉn th·ªã | 
                    C√°c √¥ m√†u v√†ng l√† ng√†y c√≥ ghi ch√∫ | 
                    <em>Hover chu·ªôt ƒë·ªÉ xem chi ti·∫øt</em>
                </td>
            `;
            infoRow.style.position = 'sticky';
            infoRow.style.bottom = '0';
            infoRow.style.zIndex = '5';
            tbody.appendChild(infoRow);
        } else {
            // Th√¥ng b√°o khi kh√¥ng c√≥ ghi ch√∫
            const noDataRow = document.createElement('tr');
            noDataRow.innerHTML = `
                <td colspan="5" style="text-align: center; font-size: 14px; color: #6c757d; padding: 20px; background-color: #f8f9fa;">
                    üìÑ Ch∆∞a c√≥ ghi ch√∫ n√†o trong c∆° s·ªü d·ªØ li·ªáu. <br>
                    <small>Ghi ch√∫ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·ª± ƒë·ªông khi c√≥ d·ªØ li·ªáu t·ª´ Firestore.</small>
                </td>
            `;
            tbody.appendChild(noDataRow);
        }

        // Th√™m CSS cho b·∫£ng responsive
        this.addTableStyles();
        this.wrapTableInContainer();
    }

    // Fallback render function (original)
    renderStudentTable(data) {
        if (!data || data.length === 0) {
            console.warn("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ render");
            return;
        }
        
        const tbody = document.getElementById("studentTableBody");
        const thead = document.querySelector("#studentTableBody").closest('table').querySelector('thead tr');

        if (!tbody || !thead) return;

        tbody.innerHTML = "";

        // Reset header to original
        thead.innerHTML = `
            <th class="col-stt">STT</th>
            <th class="col-mssv">MSSV</th>
            <th class="col-name">H·ªå V√Ä T√äN</th>
            <th class="col-room">PH√íNG</th>
            <th class="col-floor">T·∫¶NG</th>
        `;

        data.forEach((student, index) => {
            const row = document.createElement("tr");
            row.setAttribute("data-mssv", student.mssv);
            row.setAttribute("data-name", student.name);
            row.setAttribute("data-room", student.room);

            row.innerHTML = `
                <td>${index + 1}</td>
                <td>${student.mssv}</td>
                <td>${student.name}</td>
                <td>${student.room}</td>
                <td>${student.floor}</td>
            `;
            tbody.appendChild(row);
        });
    }

    // ===================== NOTES TAB FUNCTIONALITY =====================
    async loadNotesTab(container) {
        try {
            if (typeof db === 'undefined') {
                container.innerHTML = `
                    <h2>üìå Ghi ch√∫</h2>
                    <p>L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu</p>
                `;
                return;
            }

            const snapshot = await db.collection("cham_phong_9").orderBy("createdAt", "desc").limit(50).get();

            if (snapshot.empty) {
                container.innerHTML = "";
                return;
            }
            snapshot.forEach(doc => {
                const data = doc.data();

                if (data.ghiChu && data.ghiChu.trim() !== "") {
                    let timeStr = "";
                    if (data.createdAt) {
                        if (typeof data.createdAt === 'string') {
                            timeStr = new Date(data.createdAt).toLocaleString("vi-VN");
                        } else if (data.createdAt && data.createdAt.toDate) {
                            timeStr = data.createdAt.toDate().toLocaleString("vi-VN");
                        } else if (data.serverTimestamp && data.serverTimestamp.toDate) {
                            timeStr = data.serverTimestamp.toDate().toLocaleString("vi-VN");
                        }
                    }

                }
            });

        } catch (err) {
            console.error("L·ªói t·∫£i ghi ch√∫:", err);
        }
    }

    // ===================== EXPORT FUNCTIONALITY =====================
    async exportDataWithNotes(filteredData) {
        try {
            if (typeof db === 'undefined') {
                this.exportBasicData(filteredData);
                return;
            }

            const snapshot = await db.collection("cham_phong_9").orderBy("createdAt").get();
            const notesByRoomNameDate = {};
            const allDates = new Set();

            snapshot.forEach(doc => {
                const data = doc.data();
                if (data.ghiChu && data.ghiChu.trim() !== "" && data.room && data.nguoiTruc) {
                    let dateStr = "";
                    if (data.createdAt) {
                        if (typeof data.createdAt === 'string') {
                            dateStr = new Date(data.createdAt).toLocaleDateString("vi-VN");
                        } else if (data.createdAt && data.createdAt.toDate) {
                            dateStr = data.createdAt.toDate().toLocaleDateString("vi-VN");
                        } else if (data.serverTimestamp && data.serverTimestamp.toDate) {
                            dateStr = data.serverTimestamp.toDate().toLocaleDateString("vi-VN");
                        }
                    }

                    if (dateStr) {
                        allDates.add(dateStr);
                        const key = `${data.room}-${data.nguoiTruc}-${dateStr}`;
                        notesByRoomNameDate[key] = data.ghiChu;
                    }
                }
            });

            const sortedDates = Array.from(allDates).sort((a, b) => {
                const [dayA, monthA, yearA] = a.split('/');
                const [dayB, monthB, yearB] = b.split('/');
                const dateA = new Date(`${yearA}-${monthA}-${dayA}`);
                const dateB = new Date(`${yearB}-${monthB}-${dayB}`);
                return dateA - dateB;
            });

            const headers = ['STT', 'MSSV', 'H·ªç v√† t√™n', 'Ph√≤ng', 'T·∫ßng'];
            sortedDates.forEach(date => headers.push(`Ghi ch√∫ ${date}`));

            const csvContent = [
                headers.join(','),
                ...filteredData.map((student, index) => {
                    const row = [
                        index + 1,
                        student.mssv,
                        `"${student.name}"`,
                        student.room,
                        student.floor
                    ];

                    sortedDates.forEach(date => {
                        // Th·ª≠ t√¨m ghi ch√∫ theo name ho·∫∑c mssv
                        const keyByName = `${student.room}-${student.name}-${date}`;
                        const keyByMssv = `${student.room}-${student.mssv}-${date}`;
                        const note = notesByRoomNameDate[keyByName] || notesByRoomNameDate[keyByMssv] || "";
                        row.push(`"${note}"`);
                    });

                    return row.join(',');
                })
            ].join('\n');

            this.downloadCSV(csvContent, `danh_sach_sinh_vien_co_ghi_chu_${new Date().toLocaleDateString('vi-VN').replace(/\//g, '_')}.csv`);

        } catch (err) {
            console.error("L·ªói export:", err);
            this.exportBasicData(filteredData);
        }
    }

    // Basic export data
    exportBasicData(filteredData) {
        const headers = ['STT', 'MSSV', 'H·ªç v√† t√™n', 'Ph√≤ng', 'T·∫ßng'];
        const csvContent = [
            headers.join(','),
            ...filteredData.map((student, index) => [
                index + 1,
                student.mssv,
                `"${student.name}"`,
                student.room,
                student.floor
            ].join(','))
        ].join('\n');

        this.downloadCSV(csvContent, 'danh_sach_sinh_vien.csv');
    }

    // Helper function to download CSV
    downloadCSV(content, filename) {
        const blob = new Blob(['\ufeff' + content], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        if (link.download !== undefined) {
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }

    // ===================== UTILITY FUNCTIONS =====================
    addTableStyles() {
        if (document.getElementById('notesTableStyles')) return;

        const style = document.createElement('style');
        style.id = 'notesTableStyles';
        style.textContent = `
            .table-container {
                max-height: 70vh;
                overflow: auto;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }

            .table-container table {
                margin-bottom: 0;
                border-collapse: separate;
                border-spacing: 0;
            }

            .table-container thead th {
                position: sticky;
                top: 0;
                background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                color: white;
                border: none;
                z-index: 10;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            .table-container tbody tr:hover {
                background-color: #f8f9fa;
                transform: translateY(-1px);
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                transition: all 0.2s ease;
            }

            .col-note {
                border-left: 2px solid #28a745 !important;
            }

            @media (max-width: 768px) {
                .table-container {
                    max-height: 50vh;
                    font-size: 12px;
                }

                .col-note {
                    min-width: 120px !important;
                }
            }
        `;
        document.head.appendChild(style);
    }

    wrapTableInContainer() {
        const table = document.querySelector('#studentTableBody').closest('table');
        if (table && !table.parentElement.classList.contains('table-container')) {
            const wrapper = document.createElement('div');
            wrapper.className = 'table-container';
            table.parentElement.insertBefore(wrapper, table);
            wrapper.appendChild(table);

            // Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
            this.addScrollGuide(wrapper);
        }
    }

    // Th√™m h∆∞·ªõng d·∫´n cu·ªôn ngang
    addScrollGuide(container) {
        const guide = document.createElement('div');
        guide.id = 'scroll-guide';
        guide.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 123, 255, 0.9);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            z-index: 30;
            transition: opacity 0.3s ease;
            pointer-events: none;
        `;
        guide.innerHTML = `
            <div style="display: flex; align-items: center; gap: 8px;">
                <span>üîí C·ªôt c·ªë ƒë·ªãnh</span>
                <span style="opacity: 0.7;">|</span>
                <span>‚ÜîÔ∏è Cu·ªôn ngang ƒë·ªÉ xem ghi ch√∫</span>
            </div>
        `;

        container.style.position = 'relative';
        container.appendChild(guide);

        // T·ª± ƒë·ªông ·∫©n h∆∞·ªõng d·∫´n sau 5 gi√¢y
        setTimeout(() => {
            if (guide && guide.parentElement) {
                guide.style.opacity = '0';
                setTimeout(() => {
                    if (guide && guide.parentElement) {
                        guide.remove();
                    }
                }, 300);
            }
        }, 5000);

        // ·∫®n h∆∞·ªõng d·∫´n khi scroll
        let scrollTimeout;
        container.addEventListener('scroll', () => {
            if (guide && guide.parentElement) {
                guide.style.opacity = '0.3';
                clearTimeout(scrollTimeout);
                scrollTimeout = setTimeout(() => {
                    if (guide && guide.parentElement) {
                        guide.style.opacity = '0.8';
                    }
                }, 1000);
            }
        });
    }

    // Refresh notes data
    async refreshNotes(filteredData) {
        console.log("üîÑ NotesManager: ƒêang l√†m m·ªõi d·ªØ li·ªáu ghi ch√∫...");
        try {
            await this.loadNotesToTable(filteredData);
            console.log("‚úÖ NotesManager: L√†m m·ªõi th√†nh c√¥ng!");
        } catch (err) {
            console.error("‚ùå NotesManager: L·ªói l√†m m·ªõi:", err);
            throw err; // Re-throw ƒë·ªÉ dashboard x·ª≠ l√Ω fallback
        }
    }

    // Debug function ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu
    async debugFirestoreData() {
        try {
            console.log("üîç Debug: Ki·ªÉm tra d·ªØ li·ªáu Firestore...");
            const snapshot = await db.collection("cham_phong_9").limit(5).get();

            snapshot.forEach(doc => {
                console.log("üìÑ Document:", doc.id);
                console.log("üìä Data:", doc.data());
            });

        } catch (err) {
            console.error("‚ùå Debug error:", err);
        }
    }
}

// T·∫°o instance global ƒë·ªÉ s·ª≠ d·ª•ng
const notesManager = new NotesManager();

// Export c√°c functions ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
window.loadNotesToTable = (filteredData) => notesManager.loadNotesToTable(filteredData);
window.loadNotes = (container) => notesManager.loadNotesTab(container);
window.exportDataWithNotes = (filteredData) => notesManager.exportDataWithNotes(filteredData);
window.refreshNotes = () => {
    // L·∫•y filteredData t·ª´ global scope
    const globalFilteredData = window.filteredData || [];
    return notesManager.refreshNotes(globalFilteredData);
};

// Debug function
window.debugNotes = () => notesManager.debugFirestoreData();